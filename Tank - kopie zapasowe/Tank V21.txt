#include "raylib.h"
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdbool.h>

#define PLAYERWIDTH 45
#define PLAYERHEIGHT 45
#define NETSIZE_X 20
#define NETSIZE_Y 12
#define SIZE_OF_SQUARE 50
#define NUMBER_OF_ENEMIES 3
#define MAP "maps/map_1.txt"

const int bullet_speed = 5;

// typ wyliczeniowy przyporzadkowywujacy liczbe dla danej textury
enum ground_types
{
    EMPTY = 0,
    GRASS,
    DIRT,
    WALL,
};

enum directions
{
    LEFT = 0,
    RIGHT,
    UP,
    DOWN,
    UP_and_RIGHT,
};

enum characters
{
    PLAYER = 0,
    ENEMY,
};


// struktura przechowywujaca texture z kierunkiem czolgu
struct tank_direction_textures{
    Texture2D direction;
};

struct tank
{
    int x, y, direction, speed, movement_counter;
    Rectangle tank_collision_model;
    Texture2D tank_direction;
};

// struktura przechowywujaca informacje o pojedynczym elemencie siatki mapy
struct square
{
    int id, type_of_texture;        // zmienna przechowuja liczbe odpowiadajaca typowi textury dla danego kwadratu (np 1 - GRASS)
    int x, y;                   // polozenie kwadratu
    Texture2D square_texture;    // zmienna przechowywujaca texture dla kwadratu
};

struct walls_on_map
{
    Rectangle wall;
    int id;
};


struct bullet
{
    int x, y, direction;
    Rectangle bullet_collision_model;
    bool is_used;
};

struct menu_textures
{
    Texture2D menu_background, menu_foreground;
    Texture2D tank_1;
    Texture2D button;
    Texture2D button_2;
    int animation_movement_1, animation_movement_2;
    int animation_counter;

    bool is_menu_open;
};

void loadMenuTextures(struct menu_textures *menu)
{
    menu->button = LoadTexture("img/start_button.png");
    menu->button_2 = LoadTexture("img/start_button2.png");
    menu->menu_background = LoadTexture("img/menu_background.png");
    menu->tank_1 = LoadTexture("img/menu_tank.png");
    menu->menu_foreground = LoadTexture("img/menu_foreground.png");
    menu->animation_movement_1 = menu->animation_movement_2 = 0;

    menu->is_menu_open = true;
}

void unloadMenuTextures(struct menu_textures *menu)
{
    UnloadTexture(menu->button);
    UnloadTexture(menu->button_2);
    UnloadTexture(menu->menu_background);
    UnloadTexture(menu->tank_1);
    UnloadTexture(menu->menu_foreground);
}




// funkcja wczytuje textury pozycji czaolgu do tablicy 4 - elementowej, ktora bedzie je przechowywac
void load_tank_textures(struct tank_direction_textures *player_positions, int choice)
{
    Image temp, tmp;
      switch(choice)
      {
      case PLAYER:
        temp = LoadImage("img/tank.png");
        break;
      case ENEMY:
        temp = LoadImage("img/enemy_tank.png");
        break;
      default:
        temp = LoadImage("img/enemy_tank.png");
        break;
      }
    tmp = ImageFromImage(temp, (Rectangle){0, 0, PLAYERWIDTH , PLAYERHEIGHT});
    player_positions[0].direction = LoadTextureFromImage(tmp);
    tmp = ImageFromImage(temp, (Rectangle){45,0, PLAYERHEIGHT , PLAYERWIDTH});
    player_positions[1].direction = LoadTextureFromImage(tmp);
    tmp = ImageFromImage(temp, (Rectangle){90, 0, PLAYERHEIGHT , PLAYERWIDTH});
    player_positions[2].direction = LoadTextureFromImage(tmp);
    tmp = ImageFromImage(temp, (Rectangle){135, 0, PLAYERWIDTH , PLAYERHEIGHT});
    player_positions[3].direction = LoadTextureFromImage(tmp);

    UnloadImage(temp);
    UnloadImage(tmp);
}

void change_tank_textures(struct tank_direction_textures *positions, Texture2D *tank_direction, int direction)
{

    switch(direction)
    {
    case DOWN:
        *tank_direction = positions[0].direction;
        break;
    case LEFT:
        *tank_direction = positions[1].direction;
        break;
    case RIGHT:
        *tank_direction = positions[2].direction;
        break;
    case UP:
        *tank_direction = positions[3].direction;
        break;
    default:
        *tank_direction = positions[0].direction;
        break;
    }
}
// funkcja wczytuje player_positions czolgu
void loadPlayerStartTexture(Texture2D start_texture, Texture2D *tank)
{
    *tank = start_texture;
}
// funkcja wczytuje dane o mapie z pliku
int loadMapFromFile( struct square pola_siatki[][NETSIZE_X])  // funkcja laduje mape z pliku
{
    int i, j;
    char c;
    FILE *map = fopen(MAP, "r");
    if(map != NULL)
    {
        for(i = 0; i < NETSIZE_Y; i++)
            for(j = 0; j < NETSIZE_X; j++)
            {
                c = pola_siatki[i][j].type_of_texture = fgetc(map);
                if(c != EOF)
                {
                    if(c != '\n')
                        pola_siatki[i][j].type_of_texture = c - 48;
                    else
                        j--;

                }
                else
                {
                    pola_siatki[i][j].type_of_texture = EMPTY;
                }

            }
        fclose(map);
        return 1;
    }

    return 0;


}
 // funkcja dobiera textury do mapy
void fillTheMap(struct square pola_siatki[][NETSIZE_X])
{
    int i, j, k = 0;
    for(i = 0; i < NETSIZE_Y; i++)
    {
        for(j = 0; j < NETSIZE_X; j++)
        {

            switch(pola_siatki[i][j].type_of_texture)
            {
            case EMPTY:
                pola_siatki[i][j].square_texture = LoadTexture("img/empty_space.png");
                break;
            case GRASS:
                pola_siatki[i][j].square_texture = LoadTexture("img/grass.png");
                break;
            case DIRT:
                pola_siatki[i][j].square_texture = LoadTexture("img/dirt.png");
                break;
            case WALL:
                pola_siatki[i][j].square_texture = LoadTexture("img/brick_wall.png");
                break;
            default:
                pola_siatki[i][j].square_texture = LoadTexture("img/empty_space.png");
                break;

            }
            pola_siatki[i][j].y = SIZE_OF_SQUARE * i;
            pola_siatki[i][j].x = SIZE_OF_SQUARE * j;
            pola_siatki[i][j].id = k;
            k++;
        }
    }

}
// funkcja rysuje mape na ekranie
void drawTheMap(struct square pola_siatki[][NETSIZE_X])
{
    int i, j;
    for(i = 0; i < NETSIZE_Y; i++)
        for(j = 0; j < NETSIZE_X; j++)
        DrawTexture(pola_siatki[i][j].square_texture, pola_siatki[i][j].x, pola_siatki[i][j].y, RAYWHITE);
}

// funkcja usuwa textury mapy z pamieci RAM
void unloadMap(struct square pola_siatki[][NETSIZE_X])      // usuniecie textur mapy z pamieci RAM
{
    int i, j;
    for(i = 0; i < NETSIZE_Y; i++)
        for(j = 0; j < NETSIZE_X; j++)
            UnloadTexture(pola_siatki[i][j].square_texture);
}
// funkcja okresla granice mapy za ktore czolg nie moze wyjechac
void setBorders(struct tank *tank)
{
    if(tank -> x > 1000 - PLAYERWIDTH) tank -> x = tank -> tank_collision_model.x =  1000 - PLAYERWIDTH;
    if(tank -> y > 600 - PLAYERHEIGHT) tank -> y = tank -> tank_collision_model.y= 600 - PLAYERWIDTH;
    if(tank -> x < 0)                  tank -> x = tank -> tank_collision_model.x = 0;
    if(tank -> y < 0)                  tank -> y = tank -> tank_collision_model.y = 0;

}

// funkcja rysuje granice mapy na ekranie
void drawTheBorders()
{
    DrawRectangle(0,0,1000,5,YELLOW);
    DrawRectangle(0,600,1005,5,YELLOW);
    DrawRectangle(0,0,5,600,YELLOW);
    DrawRectangle(1000,0,5,600,YELLOW);
    return;
}

// funkcja okresla ile scian jest na mapie
int howManyWalls(struct square pola_siatki[][NETSIZE_X], int walls_number)
{
    int i, j;
    for(i = 0; i < NETSIZE_Y; i++)
    {
        for(j = 0; j < NETSIZE_X; j++)
        {
            if(pola_siatki[i][j].type_of_texture == WALL)
                walls_number++;
        }
    }
    return walls_number;
}
// funkcja tworzy modele kolizyjne scian
void createWallsColisionModels(struct walls_on_map *walls, struct square pola_siatki[][NETSIZE_X])
{
    int i, j, licznik = 0;
    for(i = 0; i < NETSIZE_Y; i++)
    {
        for(j = 0; j < NETSIZE_X; j++)
        {
            if(pola_siatki[i][j].type_of_texture == WALL)
            {
                walls[licznik].wall.x = pola_siatki[i][j].x;
                walls[licznik].wall.y = pola_siatki[i][j].y;
                walls[licznik].wall.width = walls[licznik].wall.height = SIZE_OF_SQUARE;
                walls[licznik].id = pola_siatki[i][j].id;
                licznik++;
            }
        }
    }
}


// funkcja rysuje modele kolizyjne scian (funkcja pomocnicza)
void drawWallsColisionModels(struct walls_on_map *walls, int walls_number)
{
    int i;
    for(i = 0; i < walls_number; i++)
        DrawRectangle(walls[i].wall.x, walls[i].wall.y, walls[i].wall.width, walls[i].wall.height, BLUE);
}
// funkcja wykrywa kolizje z gory
bool AAbb_up(Rectangle tank, Rectangle object, int speed)
{

    if(tank.x + PLAYERWIDTH - speed > object.x && tank.x + speed < object.x + object.width
        &&tank.y + PLAYERHEIGHT - speed > object.y && tank.y < object.y + object.height)
        return true;
    else
        return false; // brak kolizji
}
// funkcja wykrywa kolizje z dolu
bool AAbb_down(Rectangle tank, Rectangle object, int speed)
{
    if(tank.x + PLAYERWIDTH - speed > object.x && tank.x + speed < object.x + object.width
        && tank.y + PLAYERHEIGHT >= object.y && tank.y + speed  < object.y + object.height)
        return true;
    else
        return false; // brak kolizji
}
// funkcja wykrywa kolizje z prawej strony
bool AAbb_right(Rectangle tank, Rectangle object,int speed, int character)
{
        if(tank.x + PLAYERWIDTH >= object.x && tank.x + speed * (character + 1) < object.x + object.width
           && tank.y + PLAYERHEIGHT - speed * (character + 1) > object.y && tank.y + speed * (character + 1)< object.y + object.height)
            return true;

    return false; // brak kolizji
}
// funkcja wykrywa kolizje z lewej strony
bool AAbb_left(Rectangle tank, Rectangle object,int speed, int character)
{
        if(tank.x + PLAYERWIDTH - speed * (character + 1)> object.x && tank.x <= object.x + object.width
           && tank.y + PLAYERHEIGHT - speed * (character + 1) > object.y && tank.y + speed * (character + 1) < object.y + object.height)
            return true;

    return false; // brak kolizji
}

bool checkCollisionWithWalls(Rectangle tank_collision_model,int speed, int direction, struct walls_on_map *walls, int walls_number)
{
    int i;
    for(i = 0; i < walls_number; i++)
    {
        switch(direction)
        {
    case UP:
        if(AAbb_up(tank_collision_model, walls[i].wall, speed))
            return true;
        break;
    case DOWN:
        if(AAbb_down(tank_collision_model, walls[i].wall, speed))
            return true;
        break;
    case RIGHT:
        if(AAbb_right(tank_collision_model, walls[i].wall, speed, 0))
            return true;
        break;
    case LEFT:
        if(AAbb_left(tank_collision_model, walls[i].wall, speed, 0))
            return true;
        break;
    default:
        break;
        }
    }
    return false;
}
void addPlayer(struct tank *player, struct tank_direction_textures *player_positions)
{
    player -> x = 320;
    player -> y = 320;
    player -> direction = DOWN;
    player -> speed = 4;
    player -> movement_counter = 0;
    Rectangle tmp = {player -> x, player -> y, PLAYERWIDTH, PLAYERHEIGHT};
    player -> tank_collision_model = tmp;
    player -> tank_direction = player_positions[0].direction;
}


void addEnemy(struct tank *enemies, struct tank_direction_textures *enemy_positions)
{
    int i;
    for(i = 0; i < NUMBER_OF_ENEMIES; i++)
    {
        enemies[i].x = 600;
        enemies[i].y = (i+2) * 45;
        enemies[i].direction = rand()%4;
        enemies[i].speed = 2;
        enemies[i].movement_counter = 0;
        Rectangle tmp = {enemies[i].x, enemies[i].y, PLAYERWIDTH, PLAYERHEIGHT};
        enemies[i].tank_collision_model = tmp;
        enemies[i].tank_direction = enemy_positions[0].direction;
    }

}
void unloadEnemyTextures(struct tank *enemies)
{
    int i;
    for(i = 0; i < NUMBER_OF_ENEMIES; i++)
        UnloadTexture(enemies[i].tank_direction);
}
bool checkCollisionBetweenTanksAndPlayer(struct tank *enemies,int speed, int direction, int which_tank, Rectangle tank_collision_model, Rectangle player_collision_model)
{
    int i;
    for(i = 0; i < NUMBER_OF_ENEMIES; i++)
    {
        if(which_tank == i)
            continue;

        switch(direction)
        {
        case UP:
            if(AAbb_up(tank_collision_model,enemies[i].tank_collision_model, speed) || AAbb_up(tank_collision_model, player_collision_model, speed))
                return true;
            break;
        case DOWN:
            if(AAbb_down(tank_collision_model,enemies[i].tank_collision_model, speed) || AAbb_down(tank_collision_model, player_collision_model, speed))
                return true;
            break;
        case RIGHT:
            if(AAbb_right(tank_collision_model,enemies[i].tank_collision_model, speed, 1) || AAbb_right(tank_collision_model, player_collision_model, speed, 1))
                return true;
            break;
        case LEFT:
            if(AAbb_left(tank_collision_model,enemies[i].tank_collision_model, speed, 1) || AAbb_left(tank_collision_model, player_collision_model, speed, 1))
                return true;
            break;
        default:
            break;
        }
    }
    return false;
}

bool checkCollisionBetweenPlayerAndOtherTanks(struct tank *enemies,int speed, int direction, Rectangle player_collision_model)
{
     int i;
    for(i = 0; i < NUMBER_OF_ENEMIES; i++)
    {
        switch(direction)
        {
        case UP:
            if(AAbb_up(player_collision_model,enemies[i].tank_collision_model, speed))
                return true;
            break;
        case DOWN:
            if(AAbb_down(player_collision_model,enemies[i].tank_collision_model, speed))
                return true;
            break;
        case RIGHT:
            if(AAbb_right(player_collision_model,enemies[i].tank_collision_model, speed, 1))
                return true;
            break;
        case LEFT:
            if(AAbb_left(player_collision_model,enemies[i].tank_collision_model, speed, 1))
                return true;
            break;
        default:
            break;
        }
    }
    return false;
}
void enemyMovements(struct tank_direction_textures *enemy_positions, struct tank *enemies, struct walls_on_map *walls, int walls_number, Rectangle player)
{

    int i;
    for(i = 0; i < NUMBER_OF_ENEMIES; i++)
    {
        switch(enemies[i].direction)
            {
            case LEFT:
                if(!checkCollisionWithWalls(enemies[i].tank_collision_model,enemies[i].speed, LEFT,  walls, walls_number) &&
                   !checkCollisionBetweenTanksAndPlayer(enemies, enemies[i].speed, LEFT, i, enemies[i].tank_collision_model, player) && enemies[i].movement_counter != 40)
                {
                    change_tank_textures(enemy_positions, &enemies[i].tank_direction, LEFT);
                    enemies[i].tank_collision_model.x -= enemies[i].speed;
                    enemies[i].x -= enemies[i].speed;
                    enemies[i].movement_counter++;
                }
                else
                {
                    enemies[i].direction = rand()%4;
                    enemies[i].movement_counter = 0;
                }
                break;
            case RIGHT:
                if(!checkCollisionWithWalls(enemies[i].tank_collision_model,enemies[i].speed, RIGHT,  walls, walls_number) &&
                   !checkCollisionBetweenTanksAndPlayer(enemies, enemies[i].speed, RIGHT, i, enemies[i].tank_collision_model, player) && enemies[i].movement_counter != 40)
                {
                    change_tank_textures(enemy_positions, &enemies[i].tank_direction, RIGHT);
                    enemies[i].tank_collision_model.x += enemies[i].speed;
                    enemies[i].x += enemies[i].speed;
                    enemies[i].movement_counter++;
                }
                else
                    {
                    enemies[i].direction = rand()%4;
                    enemies[i].movement_counter = 0;
                }
                break;
            case DOWN:
                if(!checkCollisionWithWalls(enemies[i].tank_collision_model,enemies[i].speed, DOWN,  walls, walls_number) &&
                   !checkCollisionBetweenTanksAndPlayer(enemies, enemies[i].speed, DOWN, i, enemies[i].tank_collision_model, player) && enemies[i].movement_counter != 80)
                {
                    change_tank_textures(enemy_positions, &enemies[i].tank_direction, DOWN);
                    enemies[i].tank_collision_model.y += enemies[i].speed;
                    enemies[i].y += enemies[i].speed;
                    enemies[i].movement_counter++;
                }
                else
                    {
                    enemies[i].direction = rand()%4;
                    enemies[i].movement_counter = 0;
                }
                break;
            case UP:
                if(!checkCollisionWithWalls(enemies[i].tank_collision_model,enemies[i].speed, UP, walls, walls_number) &&
                   !checkCollisionBetweenTanksAndPlayer(enemies, enemies[i].speed, DOWN, i, enemies[i].tank_collision_model, player) && enemies[i].movement_counter != 80)
                {
                    change_tank_textures(enemy_positions, &enemies[i].tank_direction, UP);
                    enemies[i].tank_collision_model.y -= enemies[i].speed;
                    enemies[i].y -= enemies[i].speed;
                    enemies[i].movement_counter++;
                }
                else
                    {
                    enemies[i].direction = rand()%4;
                    enemies[i].movement_counter = 0;
                }
                break;
            default:
                enemies[i].direction = rand()%4;
                enemies[i].movement_counter = 0;
                break;

            }

        if(enemies[i].x > 1000 - PLAYERWIDTH)  { enemies[i].x  = enemies[i].tank_collision_model.x  =  1000 - PLAYERWIDTH; enemies[i].direction = rand()%4;}
        if(enemies[i].y > 600 - PLAYERHEIGHT)  { enemies[i].y  = enemies[i].tank_collision_model.y  = 600 - PLAYERWIDTH; enemies[i].direction = rand()%4;}
        if(enemies[i].x  < 0)                  { enemies[i].x  = enemies[i].tank_collision_model.x  = 0; enemies[i].direction = rand()%4;}
        if(enemies[i].y  < 0)                  { enemies[i].y  = enemies[i].tank_collision_model.y  = 0; enemies[i].direction = rand()%4;}

    }

}

void drawEnemies(struct tank *enemies)
{
    int i;
    for(i = 0; i < NUMBER_OF_ENEMIES; i++)
        DrawTextureEx(enemies[i].tank_direction, (Vector2){enemies[i].x, enemies[i].y}, 0, 1, RAYWHITE);
}

void drawAnimatedMenu(struct menu_textures *menu)
{
    BeginDrawing();
    DrawTexture(menu->menu_background,0,0,RAYWHITE);
    DrawTextureEx(menu->tank_1, (Vector2){900 - menu->animation_movement_1, 390}, 0, 0.8, RAYWHITE);
    DrawTexture(menu->tank_1, 1400 - menu->animation_movement_2, 435, RAYWHITE);
    DrawTexture(menu->menu_foreground,0,340,RAYWHITE);

    if(GetMouseX() >= 465 && GetMouseX() <= 815 && GetMouseY() >= 285 && GetMouseY() <= 435)
    {
        DrawTexture(menu->button_2, 465, 285, RAYWHITE);
        if(IsMouseButtonPressed(MOUSE_LEFT_BUTTON))
        {
            EndDrawing();
            menu->is_menu_open = false;
            return;
        }
    }
    else
        DrawTexture(menu->button, 465, 285, RAYWHITE);
    EndDrawing();

    menu->animation_movement_1 += 2;
    menu->animation_movement_2 += 3;
    if(menu->animation_movement_1 >= 1290)
        menu->animation_movement_1 = -400;
    if(menu->animation_movement_2 >= 1700)
        menu->animation_movement_2 = -400;
}

int checkColissionBulletWalls(Rectangle bullet_collision_model,int bullet_direction, struct walls_on_map *walls, int walls_number)
{
    int i;
    for(i = 0; i < walls_number; i++)
        //if(bullet_collision_model.x + bullet_collision_model.width >= walls[i].wall.x && bullet_collision_model.x <= walls[i].wall.x + walls[i].wall.width
           //&& bullet_collision_model.y + bullet_collision_model.height >= walls[i].wall.y && bullet_collision_model.y <= walls[i].wall.y + walls[i].wall.height)
           if(CheckCollisionRecs(bullet_collision_model, walls[i].wall))
           {
               walls[i].wall.x = walls[i].wall.y = -200;
               return walls[i].id;
           }

    return 0;
}

void replace_map_square(struct square pola_siatki[][NETSIZE_X], int id)
{
    int i, j;
    for(i = 0; i < NETSIZE_Y; i++)
    {
        for(j = 0; j < NETSIZE_X; j++)
            if(id == pola_siatki[i][j].id)
            {
                pola_siatki[i][j].type_of_texture = 1;
                pola_siatki[i][j].square_texture = LoadTexture("img/grass.png");
                return;
            }
    }
}

void initiate_bullet (struct bullet *bullet, struct tank player)
{
    switch(player.direction)
    {
    case UP:
        bullet->x = player.x + 8;
        bullet->y = player.y - 25;
        break;
    case DOWN:
        bullet->x = player.x + 8;
        bullet->y = player.y + 25;
        break;
    case LEFT:
        bullet->x = player.x - 25;
        bullet->y = player.y + 8;
        break;
    case RIGHT:
        bullet->x = player.x + 25;
        bullet->y = player.y + 8;
        break;
    default:
        bullet->x = player.x;
        bullet->y = player.y;
        break;
    }
    bullet->direction = player.direction;
    Rectangle bullet_model = {bullet->x, bullet->y, 40, 40};
    bullet->bullet_collision_model = bullet_model;
    bullet->is_used = true;
}

void load_bullet_textures(Texture2D *bullet_textures)
{
    Image temp = LoadImage("img/bullet.png");

    Image temp_2 = ImageFromImage(temp, (Rectangle){0,0,40,25});
    bullet_textures[0] = LoadTextureFromImage(temp_2);
    temp_2 = ImageFromImage(temp, (Rectangle){40,0,40,25});
    bullet_textures[1] = LoadTextureFromImage(temp_2);
    UnloadImage(temp_2);
    temp_2 = ImageFromImage(temp, (Rectangle){85,0,25,40});
    bullet_textures[2] = LoadTextureFromImage(temp_2);
    temp_2 = ImageFromImage(temp, (Rectangle){110,0,25,40});
    bullet_textures[3] = LoadTextureFromImage(temp_2);

    UnloadImage(temp_2);
    UnloadImage(temp);
}

void drawBullet(struct bullet bullet, struct tank tank, Texture2D *bullet_textures)
{
    //BeginDrawing();
    switch(bullet.direction)
    {
    case UP:
        DrawTexture(bullet_textures[3],bullet.x, bullet.y, RAYWHITE);
        break;
    case DOWN:
        DrawTexture(bullet_textures[2], bullet.x, bullet.y, RAYWHITE);
        break;
    case LEFT:
        DrawTexture(bullet_textures[0], bullet.x, bullet.y, RAYWHITE);
        break;
    case RIGHT:
        DrawTexture(bullet_textures[1], bullet.x, bullet.y, RAYWHITE);
        break;
    default:
        break;
    }

    //EndDrawing();
}


int main(void)
{
    // Inicjacja
    //--------------------------------------------------------------------------------------
    srand(time(NULL));
    const int screenWidth = 1280;
    const int screenHeight = 720;
    //struct coordinates position;
    int i;
    int walls_number = 0;                                       // zmienna przechowujaca informacjie o liczbie scian w grze
    InitWindow(screenWidth, screenHeight, "Tanks 1990 in 2021 - Still good...");

    struct square pola_siatki[NETSIZE_Y][NETSIZE_X];            // tworzenie siatki mapy
    if(!loadMapFromFile(pola_siatki))                           // ladowanie mapy z pliku
        return 0;
    fillTheMap(pola_siatki);                                    // przypisywanie tekstur do kwadratow mapy
    walls_number = howManyWalls(pola_siatki, walls_number);     // zliczenie ilosci scian na mapie
    struct walls_on_map walls[walls_number];                    // tworzenie tablicy modeli kolizyjnych scian
    createWallsColisionModels(walls, pola_siatki);              // tworzenie modeli kolizyjnych scian



    struct tank_direction_textures player_positions[4], enemy_positions[4];                           // tworzenie struktury przechowujace textury pozycji czolgu gracza i przeciwnikow

    load_tank_textures(player_positions, PLAYER);                                // zaladowanie do struktury grafik pozycji czolgu
    load_tank_textures(enemy_positions, ENEMY);

    struct tank player;                         // utworzenie struktury przechowujacej informacje o graczu
    addPlayer(&player, player_positions);       // zaladowanie informacji o graczu


    struct tank enemies[NUMBER_OF_ENEMIES];     //stworzenie tablicy przechowujacej przeciwnikow
    addEnemy(enemies, enemy_positions);         // poczatkowa inicjacja przeciwnikow

    struct menu_textures menu;
    loadMenuTextures(&menu);

    struct bullet bullet;
    Texture2D bullet_textures[4];   // tymczasowe przechowanie dla textury pociskow
    load_bullet_textures(bullet_textures);

    Texture2D right_pannel = LoadTexture("img/right_pannel.png");       //usprawnic
    Texture2D bottom_pannel = LoadTexture("img/bottom_pannel.png");








    SetTargetFPS(60);                   // Ustawienie limitu 60 klatek
    //--------------------------------------------------------------------------------------

    // Glowna petla gry
    while (!WindowShouldClose())        // Okno gry bedzie otwarte do czasu nacisniecia klawisza ESC lub przycisku zamykajacego okno
    {
        /*while(menu.is_menu_open)
        {
            if(!WindowShouldClose())
                drawAnimatedMenu(&menu);
            else
            {
                for(i = 0; i < 4; i++)
                {
                    UnloadTexture(player_positions[i].direction);
                    UnloadTexture(enemy_positions[i].direction);
                }
            UnloadTexture(player.tank_direction);
            unloadEnemyTextures(enemies);
            unloadMenuTextures(&menu);
            unloadMap(pola_siatki);
            UnloadTexture(player.tank_direction);
            CloseWindow();
            return 0;
            }
        }*/

        if(IsKeyPressed(KEY_X))
            menu.is_menu_open = true;

        // Poruszanie sie czolgu po mapie
        if(IsKeyDown(KEY_RIGHT) && !checkCollisionWithWalls(player.tank_collision_model, player.speed, RIGHT, walls, walls_number)
            && !checkCollisionBetweenPlayerAndOtherTanks(enemies, player.speed, RIGHT, player.tank_collision_model))                        // ruch w prawo
        {
                player.direction = RIGHT;
                player.x = player.tank_collision_model.x += player.speed;
                if(IsKeyPressed(KEY_RIGHT) || (IsKeyReleased(KEY_UP) || IsKeyReleased(KEY_DOWN)))
                    change_tank_textures(player_positions,&player.tank_direction, RIGHT);
        }
        if(IsKeyDown(KEY_LEFT) && !checkCollisionWithWalls(player.tank_collision_model, player.speed, LEFT, walls, walls_number)
           && !checkCollisionBetweenPlayerAndOtherTanks(enemies, player.speed, LEFT, player.tank_collision_model))                         // ruch w lewo
        {
                player.direction = LEFT;
                player.x = player.tank_collision_model.x -= player.speed;
                if(IsKeyPressed(KEY_LEFT) || (IsKeyReleased(KEY_UP) || IsKeyReleased(KEY_DOWN)))
                    change_tank_textures(player_positions,&player.tank_direction, LEFT);
        }
        if(IsKeyDown(KEY_UP) && !checkCollisionWithWalls(player.tank_collision_model, player.speed, UP, walls, walls_number)
           && !checkCollisionBetweenPlayerAndOtherTanks(enemies, player.speed, UP, player.tank_collision_model))                              // ruch w gore
        {
                player.direction = UP;
                player.y = player.tank_collision_model.y -= player.speed;
                if(IsKeyPressed(KEY_UP) || (IsKeyReleased(KEY_RIGHT) || IsKeyReleased(KEY_LEFT)))
                    change_tank_textures(player_positions,&player.tank_direction, UP);
        }
        if(IsKeyDown(KEY_DOWN) && !checkCollisionWithWalls(player.tank_collision_model, player.speed, DOWN, walls, walls_number)
           && !checkCollisionBetweenPlayerAndOtherTanks(enemies, player.speed, DOWN, player.tank_collision_model))                          // ruch w dol
        {
                player.direction = DOWN;
                player.y = player.tank_collision_model.y += player.speed;
                if(IsKeyPressed(KEY_DOWN)|| (IsKeyReleased(KEY_RIGHT) || IsKeyReleased(KEY_LEFT)))
                    change_tank_textures(player_positions,&player.tank_direction, DOWN);
        }
        //---------------------------------------------------------------------
        // okreslenie granic mapy za ktore czolg nie moze wyjechac
        setBorders(&player);

        if(IsKeyPressed(KEY_C))
        {
            pola_siatki[5][5].type_of_texture = 0;
            pola_siatki[5][5].square_texture = LoadTexture("img/empty_space.png");
        }

        if(IsKeyPressed(KEY_SPACE))
        {
                initiate_bullet(&bullet, player);
        }


        if(bullet.is_used)
        {
            int which_wall = checkColissionBulletWalls(bullet.bullet_collision_model, bullet.direction, walls, walls_number);
            if(!which_wall)
            {
                switch(bullet.direction)
                {
                case LEFT:
                    bullet.x -= bullet_speed;
                    bullet.bullet_collision_model.x -= bullet_speed;
                    break;
                case RIGHT:
                    bullet.x += bullet_speed;
                    bullet.bullet_collision_model.x += bullet_speed;
                    break;
                case UP:
                    bullet.y -= bullet_speed;
                    bullet.bullet_collision_model.y -= bullet_speed;
                    break;
                case DOWN:
                    bullet.y += bullet_speed;
                    bullet.bullet_collision_model.y += bullet_speed;
                    break;
                }
            }
            else
            {
                bullet.is_used = false;
                bullet.bullet_collision_model.x = bullet.bullet_collision_model.y = - 100;
                replace_map_square(pola_siatki, which_wall);
            }

            if(bullet.bullet_collision_model.x <= 0 || bullet.bullet_collision_model.y <= 0 ||
               bullet.bullet_collision_model.x + bullet.bullet_collision_model.width >= 1000 ||
               bullet.bullet_collision_model.y + bullet.bullet_collision_model.height >= 600)
               {
                    bullet.is_used = false;
                    bullet.bullet_collision_model.x = bullet.bullet_collision_model.y = - 100;
               }
        }


        enemyMovements(enemy_positions,enemies,walls,walls_number, player.tank_collision_model); // poruszanie sie przeciwnikow



        BeginDrawing();                 // rysowanie obiektow

        ClearBackground(BLACK);                                                 // nadanie koloru czarnego dla tla
        drawTheMap(pola_siatki);                                                // wywowalnie funkcji rysujacej mape
        drawTheBorders();                                                       // wywolanie funkcji rysujacej granice mapy
        DrawTextureEx(player.tank_direction, (Vector2){player.x, player.y},0, 1, RAYWHITE);  // rysowanie textury gracza
        drawEnemies(enemies);
        DrawTexture(right_pannel, 1005, 0, RAYWHITE);
        DrawTexture(bottom_pannel, 0, 605, RAYWHITE);
        if(bullet.is_used)
            drawBullet(bullet, player, bullet_textures);
        DrawFPS(20,20);                                                        // wypisywanie na ekranie wartosci FPS
        DrawText(TextFormat("x = %d", player.x), 20, 40, 20, RED);          // wypisywanie na ekranie pozycji x czolgu
        DrawText(TextFormat("y = %d", player.y), 20, 60, 20, RED);          // wypisywanie na ekranie pozycji y czolgu

        DrawText(TextFormat("bullet.x = %d", bullet.x), 20, 80, 20, RED);          // wypisywanie na ekranie pozycji x czolgu
        DrawText(TextFormat("bullet.y = %d", bullet.y), 20, 100, 20, RED);

        EndDrawing();                   // koniec rysowania obiektow


    //--------------------------------------------------------------------------------------
    }
    for(i = 0; i < 4; i++)
    {
        UnloadTexture(player_positions[i].direction);
        UnloadTexture(enemy_positions[i].direction);
    }
    unloadMenuTextures(&menu);
    unloadEnemyTextures(enemies);
    unloadMenuTextures(&menu);
    unloadMap(pola_siatki);
    UnloadTexture(player.tank_direction);
    CloseWindow();
    return 0;
}
