#include "raylib.h"
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define PLAYERWIDTH 45
#define PLAYERHEIGHT 45
#define NETSIZE_X 20
#define NETSIZE_Y 12
#define SIZE_OF_SQUARE 50

enum ground_types
{
    EMPTY = 0,
    GRASS,
    DIRT,
    WALL,
};

// przechowanie koordynatow czolgu
struct coordinates
{
    int x, y;
};

struct tank_direction{
    Image direction;
};

struct square
{
    int type_of_texture;
    int x, y;
    Texture2D field_texture;
};


void load_tank_textures(struct tank_direction *pozycje)
{
    Image temp = LoadImage("img/tank.png");
    pozycje[0].direction = ImageFromImage(temp, (Rectangle){0, 0, PLAYERWIDTH , PLAYERHEIGHT});
    pozycje[1].direction = ImageFromImage(temp, (Rectangle){45,0, PLAYERHEIGHT , PLAYERWIDTH});
    pozycje[2].direction = ImageFromImage(temp, (Rectangle){90, 0, PLAYERHEIGHT , PLAYERWIDTH});
    pozycje[3].direction = ImageFromImage(temp, (Rectangle){135, 0, PLAYERWIDTH , PLAYERHEIGHT});
}

void load_tank_texture(Image image, Texture2D *tank)
{
    *tank = LoadTextureFromImage(image);
}

int loadMapFromFile( struct square pola_siatki[][NETSIZE_X])  // funkcja laduje mape z pliku
{
    int i, j;
    char c;
    FILE *map = fopen("maps/map_1.txt", "r");
    if(map != NULL)
    {
        for(i = 0; i < NETSIZE_Y; i++)
            for(j = 0; j < NETSIZE_X; j++)
            {
                c = pola_siatki[i][j].type_of_texture = fgetc(map);
                if(c != EOF)
                {
                    if(c != '\n')
                        pola_siatki[i][j].type_of_texture = c - 48;
                    else
                        j--;

                }
                else
                {
                    pola_siatki[i][j].type_of_texture = EMPTY;
                }

            }
        fclose(map);
        return 1;
    }

    return 0;


}

void fillTheMap(struct square pola_siatki[][NETSIZE_X]) // funkcja dobiera textury do mapy, chyba jest szybciej jesli sie je bierze z jednego pliku(spritesheet)
{
    int i, j;
    for(i = 0; i < NETSIZE_Y; i++)
    {
        for(j = 0; j < NETSIZE_X; j++)
        {

            switch(pola_siatki[i][j].type_of_texture)
            {
            case EMPTY:
                pola_siatki[i][j].field_texture = LoadTexture("img/empty_space.png");
                break;
            case GRASS:
                pola_siatki[i][j].field_texture = LoadTexture("img/grass.png");
                break;
            case DIRT:
                pola_siatki[i][j].field_texture = LoadTexture("img/empty_space.png"); // na razie brak textury dirt.png
                break;
            case WALL:
                pola_siatki[i][j].field_texture = LoadTexture("img/brick_wall.png");
                break;
            default:
                pola_siatki[i][j].field_texture = LoadTexture("img/empty_space.png");
                break;

            }
            pola_siatki[i][j].y = SIZE_OF_SQUARE * i;
            pola_siatki[i][j].x = SIZE_OF_SQUARE * j;

        }
    }

}

void drawTheMap(struct square pola_siatki[][NETSIZE_X])
{
    int i, j;
    for(i = 0; i < NETSIZE_Y; i++)
        for(j = 0; j < NETSIZE_X; j++)
        DrawTexture(pola_siatki[i][j].field_texture, pola_siatki[i][j].x, pola_siatki[i][j].y, RAYWHITE);
}

void unloadMap(struct square pola_siatki[][NETSIZE_X])
{
    int i, j;
    for(i = 0; i < NETSIZE_Y; i++)
        for(j = 0; j < NETSIZE_X; j++)
            UnloadTexture(pola_siatki[i][j].field_texture);
}

int howManyWalls(struct square pola_siatki[][NETSIZE_X], int walls_number)
{
    int i, j;
    for(i = 0; i < NETSIZE_Y; i++)
    {
        for(j = 0; j < NETSIZE_X; j++)
        {
            if(pola_siatki[i][j].type_of_texture == WALL)
                walls_number++;
        }
    }
    return walls_number;
}

void createWallsColisionModels(Rectangle *walls, struct square pola_siatki[][NETSIZE_X])
{
    int i, j, licznik = 0;
    for(i = 0; i < NETSIZE_Y; i++)
    {
        for(j = 0; j < NETSIZE_X; j++)
        {
            if(pola_siatki[i][j].type_of_texture == WALL)
            {
                walls[licznik].x = pola_siatki[i][j].x;
                walls[licznik].y = pola_siatki[i][j].y;
                walls[licznik].width = walls[licznik].height = SIZE_OF_SQUARE;
                licznik++;
            }
        }
    }
}

void drawWallsColisionModels(Rectangle *walls, int walls_number)
{
    int i;
    for(i = 0; i < walls_number; i++)
        DrawRectangle(walls[i].x, walls[i].y, walls[i].width, walls[i].height, BLUE);
}

bool AAbb_up(Rectangle *walls, int walls_number, Rectangle player)
{
    int i;
    for(i = 0; i < walls_number; i++)
    {
        if(player.x + PLAYERWIDTH > walls[i].x && player.x < walls[i].x + walls[i].width
           && player.y + PLAYERHEIGHT > walls[i].y && player.y  <= walls[i].y + walls[i].height)
            return true;
    }
    return false; // brak kolizji
}

bool AAbb_down(Rectangle *walls, int walls_number, Rectangle player)
{
    int i;
    for(i = 0; i < walls_number; i++)
    {
        if(player.x + PLAYERWIDTH > walls[i].x && player.x < walls[i].x + walls[i].width
           && player.y + PLAYERHEIGHT >= walls[i].y && player.y  < walls[i].y + walls[i].height)
            return true;
    }
    return false; // brak kolizji
}

bool AAbb_right(Rectangle *walls, int walls_number, Rectangle player)
{
    int i;
    for(i = 0; i < walls_number; i++)
    {
        if(player.x + PLAYERWIDTH >= walls[i].x && player.x < walls[i].x + walls[i].width
           && player.y + PLAYERHEIGHT > walls[i].y && player.y  < walls[i].y + walls[i].height)
            return true;
    }
    return false; // brak kolizji
}

bool AAbb_left(Rectangle *walls, int walls_number, Rectangle player)
{
    int i;
    for(i = 0; i < walls_number; i++)
    {
        if(player.x + PLAYERWIDTH > walls[i].x && player.x <= walls[i].x + walls[i].width
           && player.y + PLAYERHEIGHT > walls[i].y && player.y  < walls[i].y + walls[i].height)
            return true;
    }
    return false; // brak kolizji
}





int main(void)
{
    // Initialization
    //--------------------------------------------------------------------------------------
    const int screenWidth = 1280;
    const int screenHeight = 720;
    struct coordinates position;
    int i, speed = 5;
    int walls_number = 0;                                       // zmienna przechowujaca informacjie o liczbie scian w grze
    InitWindow(screenWidth, screenHeight, "Tanks 1990 in 2021 - Still good...");

    struct square pola_siatki[NETSIZE_Y][NETSIZE_X];            // tworzenie siatki mapy
    if(!loadMapFromFile(pola_siatki))                           // ladowanie mapy z pliku
        return 0;
    fillTheMap(pola_siatki);                                    // przypisywanie tekstur do kwadratow mapy
    walls_number = howManyWalls(pola_siatki, walls_number);     // zliczenie ilosci scian na mapie
    Rectangle walls[walls_number];                              // tworzenie tablicy modeli kolizyjnych scian
    createWallsColisionModels(walls, pola_siatki);


    position.x = position.y = 320;                              // koordynaty punktu spawnu czolgu

    struct tank_direction pozycje[4];                           // tworzenie struktury przechowujace textury pozycji czolgu
    load_tank_textures(pozycje);

    Texture2D tank;                                             // tworzenie zmiennej przechowujacej aktualna texture czolgu
    load_tank_texture(pozycje[0].direction, &tank);             // ladowanie poczatkowej pozycji czolgu




    Rectangle player = {position.x, position.y, PLAYERWIDTH, PLAYERHEIGHT}; // tworzenie modelu kolizijnego gracza





    SetTargetFPS(60);                   // Set our game to run at 60 frames-per-second
    //--------------------------------------------------------------------------------------

    // Main game loop
    while (!WindowShouldClose())        // Detect window close button or ESC key
    {



        // Poruszanie sie czolgu po mapie(usprawnione)
        if(IsKeyDown(KEY_RIGHT) && !AAbb_right(walls, walls_number, player))
        {
                position.x = player.x += speed;
                if(IsKeyPressed(KEY_RIGHT) || (IsKeyReleased(KEY_UP) || IsKeyReleased(KEY_DOWN)))
                    load_tank_texture(pozycje[2].direction, &tank);

        }
        if(IsKeyDown(KEY_LEFT) && !AAbb_left(walls, walls_number, player))
        {
                position.x = player.x -= speed;
                if(IsKeyPressed(KEY_LEFT) || (IsKeyReleased(KEY_UP) || IsKeyReleased(KEY_DOWN)))
                    load_tank_texture(pozycje[1].direction, &tank);
        }
        if(IsKeyDown(KEY_UP) && !AAbb_up(walls, walls_number, player))
        {
                position.y = player.y -= speed;
                if(IsKeyPressed(KEY_UP) || (IsKeyReleased(KEY_RIGHT) || IsKeyReleased(KEY_LEFT)))
                    load_tank_texture(pozycje[3].direction, &tank);
        }
        if(IsKeyDown(KEY_DOWN) && !AAbb_down(walls, walls_number, player))
        {
                position.y = player.y += speed;
                if(IsKeyPressed(KEY_DOWN)|| (IsKeyReleased(KEY_RIGHT) || IsKeyReleased(KEY_LEFT)))
                    load_tank_texture(pozycje[0].direction, &tank);
        }




        BeginDrawing();

        ClearBackground(BLACK);

        //DrawRectangleRec(player, BLUE);
        drawTheMap(pola_siatki);
        //drawWallsColisionModels(walls, walls_number);
        DrawTextureEx(tank, (Vector2){position.x, position.y},0, 1, RAYWHITE);
        //DrawRectangleRec(player, RED);
        DrawFPS(1200,0);

        EndDrawing();



    //--------------------------------------------------------------------------------------
    }
    for(i = 0; i < 4; i++)
        UnloadImage(pozycje[i].direction);
    unloadMap(pola_siatki);
    UnloadTexture(tank);
    CloseWindow();
    return 0;
}
